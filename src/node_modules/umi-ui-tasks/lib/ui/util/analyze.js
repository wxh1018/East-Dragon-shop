"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Analyze = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// function isChunkParsed(chunk) {
//   return (typeof chunk.parsedSize === 'number');
// }
function walkModules(modules = [], cb) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const module = _step.value;
      if (cb(module) === false) return false;

      if (module.groups) {
        if (walkModules(module.groups, cb) === false) {
          return false;
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return false;
} // function elementIsOutside(elem, container) {
//   return !(elem === container || container.contains(elem));
// }


class Analyze {
  constructor(chartData) {
    this.cid = 0;
    this.allChunks = null;
    this.selectedChunks = null;
    this.cache = {
      visibleChunks: null
    };
    this.setModules(chartData);
  }

  setModules(modules) {
    walkModules(modules, module => {
      module.cid = this.cid++;
    });
    this.allChunks = modules;
    this.selectedChunks = this.allChunks;
  }

  get visibleChunks() {
    return this.allChunks;
  }

  get activeSize() {
    return 'parsedSize';
  }

} //


exports.Analyze = Analyze;