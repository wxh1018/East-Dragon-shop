"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _icons = require("@ant-design/icons");

var _reactSizeme = _interopRequireDefault(require("react-sizeme"));

var _uiModule = _interopRequireDefault(require("../../ui.module.less"));

var _enums = require("../../../server/core/enums");

var _util = require("../../util");

var _Terminal = _interopRequireDefault(require("../Terminal"));

var _model = require("../../model");

var _hooks = require("../../hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var SizeMe = _reactSizeme.default.SizeMe;
var taskType = _enums.TaskType.LINT;

var LintComponent = function LintComponent(_ref) {
  var api = _ref.api,
      _ref$detail = _ref.detail,
      detail = _ref$detail === void 0 ? {} : _ref$detail,
      dispatch = _ref.dispatch,
      iife = _ref.iife;
  var intl = api.intl;

  var _useState = (0, _react.useState)(''),
      _useState2 = _slicedToArray(_useState, 2),
      log = _useState2[0],
      setLog = _useState2[1];

  var _useInit = (0, _hooks.useInit)(detail),
      _useInit2 = _slicedToArray(_useInit, 1),
      init = _useInit2[0];

  (0, _react.useEffect)(function () {
    if (!init) {
      return function () {};
    }

    dispatch({
      type: "".concat(_model.namespace, "/getTaskDetail"),
      payload: {
        taskType: taskType,
        callback: function callback(_ref2) {
          var log = _ref2.log;
          setLog(log);
        }
      }
    });

    if (iife) {
      lint();
    }

    return function () {
      var terminal = (0, _util.getTerminalIns)(taskType, api.currentProject.key);
      terminal && terminal.clear();
    };
  }, [init, iife]);

  function lint() {
    return regeneratorRuntime.async(function lint$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dispatch({
              type: "".concat(_model.namespace, "/exec"),
              payload: {
                taskType: taskType
              }
            });

          case 1:
          case "end":
            return _context.stop();
        }
      }
    });
  }

  function cancelLint() {
    return regeneratorRuntime.async(function cancelLint$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            dispatch({
              type: "".concat(_model.namespace, "/cancel"),
              payload: {
                taskType: taskType
              }
            });

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    });
  }

  var isTaskRunning = detail && detail.state === _enums.TaskState.ING;
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("h1", {
    className: _uiModule.default.title
  }, intl({
    id: 'org.umi.ui.tasks.lint'
  })), _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_antd.Row, null, _react.default.createElement(_antd.Col, {
    span: 24,
    className: _uiModule.default.buttonGroup
  }, _react.default.createElement(_antd.Button, {
    size: api.mini ? 'small' : 'default',
    type: "primary",
    onClick: isTaskRunning ? cancelLint : lint
  }, isTaskRunning ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_icons.Pause, null), _react.default.createElement("span", {
    className: _uiModule.default.runningText
  }, ' ', intl({
    id: 'org.umi.ui.tasks.lint.cancel'
  }))) : _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_icons.CaretRight, null), _react.default.createElement("span", {
    className: _uiModule.default.runningText
  }, ' ', intl({
    id: 'org.umi.ui.tasks.lint.start'
  })))))), _react.default.createElement("div", {
    className: _uiModule.default.logContainer
  }, _react.default.createElement(SizeMe, {
    monitorWidth: true,
    monitorHeight: true
  }, function (_ref3) {
    var size = _ref3.size;
    return _react.default.createElement(_Terminal.default, {
      api: api,
      size: size,
      terminal: (0, _util.getTerminalIns)(taskType, api.currentProject.key),
      log: log,
      onClear: function onClear() {
        (0, _util.clearLog)(taskType);
      }
    });
  }))));
};

var _default = LintComponent;
exports.default = _default;