"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _icons = require("@ant-design/icons");

var _reactSizeme = _interopRequireDefault(require("react-sizeme"));

var _uiModule = _interopRequireDefault(require("../../ui.module.less"));

var _enums = require("../../../server/core/enums");

var _util = require("../../util");

var _hooks = require("../../hooks");

var _Terminal = _interopRequireDefault(require("../Terminal"));

var _model = require("../../model");

var _Analyze = _interopRequireDefault(require("../Analyze"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var SizeMe = _reactSizeme.default.SizeMe;
var taskType = _enums.TaskType.DEV;

var DevComponent = function DevComponent(_ref) {
  var api = _ref.api,
      _ref$detail = _ref.detail,
      detail = _ref$detail === void 0 ? {} : _ref$detail,
      dispatch = _ref.dispatch,
      dbPath = _ref.dbPath,
      iife = _ref.iife;
  var intl = api.intl;
  var isEnglish = api.getLocale() === 'en-US';

  var _Form$useForm = _antd.Form.useForm(),
      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),
      form = _Form$useForm2[0];

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      modalVisible = _useState2[0],
      setModalVisible = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = _slicedToArray(_useState3, 2),
      log = _useState4[0],
      setLog = _useState4[1];

  var _useState5 = (0, _react.useState)('log'),
      _useState6 = _slicedToArray(_useState5, 2),
      view = _useState6[0],
      setView = _useState6[1];

  var _useState7 = (0, _react.useState)({
    UMI_UI_SERVER: 'none',
    UMI_UI_PORT: window.location.port,
    BABEL_POLYFILL: true,
    HMR: true,
    BABEL_CACHE: true,
    MOCK: true,
    BROWSER: true,
    CLEAR_CONSOLE: true,
    PORT: null,
    FORK_TS_CHECKER: false,
    UMI_UI: null
  }),
      _useState8 = _slicedToArray(_useState7, 2),
      env = _useState8[0],
      setEnv = _useState8[1];

  var _useInit = (0, _hooks.useInit)(detail),
      _useInit2 = _slicedToArray(_useInit, 1),
      init = _useInit2[0];

  (0, _react.useEffect)(function () {
    if (!init) {
      return function () {};
    }

    if (view === 'log') {
      dispatch({
        type: "".concat(_model.namespace, "/getTaskDetail"),
        payload: {
          taskType: taskType,
          log: true,
          dbPath: dbPath,
          callback: function callback(_ref2) {
            var log = _ref2.log;
            setLog(log);
          }
        }
      });
    }

    if (iife) {
      dev();
    } // UnMount: reset form


    return function () {
      form.resetFields();
      var terminal = (0, _util.getTerminalIns)(taskType, api.currentProject.key);
      terminal && terminal.clear();
    };
  }, [init, view, iife]);

  function dev() {
    return regeneratorRuntime.async(function dev$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dispatch({
              type: "".concat(_model.namespace, "/exec"),
              payload: {
                taskType: taskType,
                args: {
                  analyze: true,
                  dbPath: dbPath
                },
                env: env
              }
            });

          case 1:
          case "end":
            return _context.stop();
        }
      }
    });
  }

  function cancelDev() {
    return regeneratorRuntime.async(function cancelDev$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            dispatch({
              type: "".concat(_model.namespace, "/cancel"),
              payload: {
                taskType: taskType
              }
            });

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    });
  }

  var openModal = function openModal() {
    setModalVisible(true);
  };

  var handleOk = function handleOk() {
    form.validateFields().then(function (values) {
      setEnv(_objectSpread({}, env, {}, values));
      setModalVisible(false);
    }).catch(function (_) {});
  };

  var handleCancel = function handleCancel() {
    setModalVisible(false);
  };

  var toggleView = function toggleView(e) {
    var value = e.target.value;
    setView(value);
  };

  var stopEventPop = function stopEventPop(e) {
    e && e.stopPropagation();
    e && e.preventDefault();
  };

  var EnvLabel = function EnvLabel(props) {
    return _react.default.createElement("div", null, _react.default.createElement("div", {
      onClick: stopEventPop,
      className: _uiModule.default.modleLableTitle
    }, intl({
      id: props.title
    })), _react.default.createElement("div", {
      className: _uiModule.default.modleLableDesc
    }, _react.default.createElement("span", {
      onClick: stopEventPop
    }, intl({
      id: props.desc
    })), _react.default.createElement("a", {
      className: _uiModule.default.modleLablelDescIcon,
      href: isEnglish ? props.link.replace(/\/zh\//, '/') : props.link,
      target: "_blank"
    }, intl({
      id: 'org.umi.ui.tasks.env.detail'
    }))));
  };

  var isTaskRunning = detail && [_enums.TaskState.ING, _enums.TaskState.SUCCESS].indexOf(detail.state) > -1;

  var outputRunningInfo = function outputRunningInfo(_ref3) {
    var _map;

    var state = _ref3.state,
        localUrl = _ref3.localUrl,
        hasError = _ref3.hasError;

    if (!state || state === _enums.TaskState.INIT) {
      return null;
    }

    var map = (_map = {}, _defineProperty(_map, _enums.TaskState.ING, {
      status: 'processing',
      text: _react.default.createElement("span", null, intl({
        id: hasError ? 'org.umi.ui.tasks.dev.state.starting.error' : 'org.umi.ui.tasks.dev.state.starting'
      }))
    }), _defineProperty(_map, _enums.TaskState.SUCCESS, {
      status: 'success',
      text: _react.default.createElement("span", null, localUrl ? _react.default.createElement(_react.default.Fragment, null, intl({
        id: 'org.umi.ui.tasks.dev.state.success'
      }), _react.default.createElement("a", {
        href: localUrl,
        target: "_blank"
      }, localUrl)) : null)
    }), _defineProperty(_map, _enums.TaskState.FAIL, {
      status: 'error',
      text: _react.default.createElement("span", null, intl({
        id: 'org.umi.ui.tasks.dev.state.fail'
      }))
    }), _map);
    return _react.default.createElement("div", {
      className: _uiModule.default.runningInfo
    }, _react.default.createElement(_antd.Badge, {
      status: map[state].status
    }), _react.default.createElement("span", null, map[state].text));
  };

  var detailHost = "https://umijs.org/".concat(isEnglish ? '' : 'zh');
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("h1", {
    className: _uiModule.default.title
  }, intl({
    id: 'org.umi.ui.tasks.dev'
  })), _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_antd.Row, {
    type: "flex",
    justify: "space-between"
  }, _react.default.createElement(_antd.Col, {
    className: _uiModule.default.buttonGroup
  }, _react.default.createElement(_antd.Button, {
    size: api.mini ? 'small' : 'default',
    type: "primary",
    onClick: isTaskRunning ? cancelDev : dev
  }, isTaskRunning ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_icons.Pause, null), _react.default.createElement("span", {
    className: _uiModule.default.runningText
  }, ' ', intl({
    id: 'org.umi.ui.tasks.dev.cancel'
  }))) : _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_icons.CaretRight, null), _react.default.createElement("span", {
    className: _uiModule.default.runningText
  }, ' ', intl({
    id: 'org.umi.ui.tasks.dev.start'
  })))), _react.default.createElement(_antd.Button, {
    size: api.mini ? 'small' : 'default',
    onClick: openModal
  }, intl({
    id: 'org.umi.ui.tasks.envs'
  })), outputRunningInfo(detail), _react.default.createElement(_antd.Modal, {
    visible: modalVisible,
    title: intl({
      id: 'org.umi.ui.tasks.envs'
    }),
    onOk: handleOk,
    onCancel: handleCancel
  }, _react.default.createElement("div", {
    className: _uiModule.default.modalContainer
  }, _react.default.createElement(_antd.Form, {
    name: "devEnv",
    form: form,
    initialValues: env,
    layout: "vertical"
  }, _react.default.createElement(_antd.Form.Item, {
    label: intl({
      id: 'org.umi.ui.tasks.envs.port'
    }),
    name: "PORT"
  }, _react.default.createElement(_antd.Input, null)), _react.default.createElement(_antd.Form.Item, {
    label: _react.default.createElement(EnvLabel, {
      title: "org.umi.ui.tasks.envs.babelPolyfill",
      desc: "org.umi.ui.tasks.envs.babelPolyfill.desc",
      link: "".concat(detailHost, "/guide/env-variables.html#babel-polyfill")
    }),
    name: "BABEL_POLYFILL",
    valuePropName: "checked"
  }, _react.default.createElement(_antd.Switch, {
    size: "small"
  })), _react.default.createElement(_antd.Form.Item, {
    label: _react.default.createElement(EnvLabel, {
      title: "org.umi.ui.tasks.envs.hmr",
      desc: "org.umi.ui.tasks.envs.hmr.desc",
      link: "".concat(detailHost, "/guide/env-variables.html#hmr")
    }),
    name: "HMR",
    valuePropName: "checked"
  }, _react.default.createElement(_antd.Switch, {
    size: "small"
  })), _react.default.createElement(_antd.Form.Item, {
    label: _react.default.createElement(EnvLabel, {
      title: "org.umi.ui.tasks.envs.babelCache",
      desc: "org.umi.ui.tasks.envs.babelCache.desc",
      link: "".concat(detailHost, "/guide/env-variables.html#babel-cache")
    }),
    name: "BABEL_CACHE",
    valuePropName: "checked"
  }, _react.default.createElement(_antd.Switch, {
    size: "small"
  })), _react.default.createElement(_antd.Form.Item, {
    label: _react.default.createElement(EnvLabel, {
      title: "org.umi.ui.tasks.envs.mock",
      desc: "org.umi.ui.tasks.envs.mock.desc",
      link: "".concat(detailHost, "/guide/env-variables.html#mock")
    }),
    name: "MOCK",
    valuePropName: "checked"
  }, _react.default.createElement(_antd.Switch, {
    size: "small"
  })), window.g_bigfish ? null : _react.default.createElement(_antd.Form.Item, {
    label: _react.default.createElement(EnvLabel, {
      title: "org.umi.ui.tasks.envs.BROWSER",
      desc: "org.umi.ui.tasks.envs.BROWSER.desc",
      link: "".concat(detailHost, "/guide/env-variables.html#browser")
    }),
    name: "BROWSER",
    valuePropName: "checked"
  }, _react.default.createElement(_antd.Switch, {
    size: "small"
  })), _react.default.createElement(_antd.Form.Item, {
    label: _react.default.createElement(EnvLabel, {
      title: "org.umi.ui.tasks.envs.clear",
      desc: "org.umi.ui.tasks.envs.clear.desc",
      link: "".concat(detailHost, "/guide/env-variables.html#clear-console")
    }),
    name: "CLEAR_CONSOLE",
    valuePropName: "checked"
  }, _react.default.createElement(_antd.Switch, {
    size: "small"
  })), _react.default.createElement(_antd.Form.Item, {
    label: _react.default.createElement(EnvLabel, {
      title: "org.umi.ui.tasks.envs.tsCheck",
      desc: "org.umi.ui.tasks.envs.tsCheck.desc",
      link: "".concat(detailHost, "/guide/env-variables.html#fork-ts-checker")
    }),
    name: "FORK_TS_CHECKER",
    valuePropName: "checked"
  }, _react.default.createElement(_antd.Switch, {
    size: "small"
  })), _react.default.createElement(_antd.Form.Item, {
    label: _react.default.createElement(EnvLabel, {
      title: "org.umi.ui.tasks.envs.umiUI",
      desc: "org.umi.ui.tasks.envs.umiUI.desc",
      link: "".concat(detailHost, "/guide/env-variables.html#umi-ui")
    }),
    name: "UMI_UI",
    valuePropName: "checked"
  }, _react.default.createElement(_antd.Switch, {
    size: "small"
  })))))), _react.default.createElement(_antd.Col, {
    className: _uiModule.default.formatGroup
  }, _react.default.createElement(_antd.Radio.Group, {
    size: api.mini ? 'small' : 'default',
    defaultValue: "log",
    value: view,
    buttonStyle: "solid",
    onChange: toggleView
  }, _react.default.createElement(_antd.Radio.Button, {
    value: "log"
  }, intl({
    id: 'org.umi.ui.tasks.log'
  })), _react.default.createElement(_antd.Radio.Button, {
    value: "analyze"
  }, intl({
    id: 'org.umi.ui.tasks.analyze'
  }))))), _react.default.createElement("div", {
    className: _uiModule.default.logContainer
  }, _react.default.createElement(SizeMe, {
    monitorWidth: true,
    monitorHeight: true
  }, function (_ref4) {
    var size = _ref4.size;
    return view === 'log' ? _react.default.createElement(_Terminal.default, {
      api: api,
      size: size,
      terminal: (0, _util.getTerminalIns)(taskType, api.currentProject.key),
      log: log,
      onClear: function onClear() {
        (0, _util.clearLog)(taskType);
      }
    }) : _react.default.createElement(_Analyze.default, {
      api: api,
      src: detail.analyzePort ? "http://".concat(window.location.hostname, ":").concat(detail.analyzePort) : null
    });
  }))));
};

var _default = DevComponent;
exports.default = _default;