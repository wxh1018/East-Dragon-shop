"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.callRemote = callRemote;

var _sockjsClient = _interopRequireDefault(require("sockjs-client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var sock = null;
var messageHandlers = [];

function init(url) {
  var opts,
      onMessage,
      onError,
      _args = arguments;
  return regeneratorRuntime.async(function init$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
          onMessage = opts.onMessage, onError = opts.onError;
          return _context.abrupt("return", new Promise(function (resolve, reject) {
            function handler(e) {
              var _JSON$parse = JSON.parse(e.data),
                  type = _JSON$parse.type,
                  payload = _JSON$parse.payload;

              if (onMessage) {
                onMessage({
                  type: type,
                  payload: payload
                });
              }

              messageHandlers.forEach(function (h) {
                h({
                  type: type,
                  payload: payload
                });
              });
            }

            sock = new _sockjsClient.default(url);

            sock.onopen = function () {
              resolve();
            };

            sock.onmessage = handler;

            sock.onclose = function (e) {
              console.error('ui socket init', e);
              sock = null;
              onError(e);
            };
          }));

        case 3:
        case "end":
          return _context.stop();
      }
    }
  });
}

function callRemote(action) {
  return new Promise(function (resolve, reject) {
    function handler(_ref) {
      var type = _ref.type,
          payload = _ref.payload;

      if (type === "".concat(action.type, "/success")) {
        if (!action.keep) removeHandler();
        resolve(payload);
      }

      if (type === "".concat(action.type, "/failure")) {
        if (!action.keep) removeHandler();
        reject(payload);
      }

      if (type === "".concat(action.type, "/progress") && action.onProgress) {
        action.onProgress(payload);
      }
    }

    function removeHandler() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = messageHandlers.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2),
              i = _step$value[0],
              h = _step$value[1];

          if (h === handler) {
            messageHandlers.splice(i, 1);
            break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    messageHandlers.push(handler);
    sock.send(JSON.stringify(_objectSpread({}, action)));
  });
}