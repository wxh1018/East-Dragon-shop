"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _immer = _interopRequireDefault(require("immer"));

var _context2 = _interopRequireDefault(require("./context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Layout = function Layout(props) {
  var api = props.api,
      children = props.children; // 用户 cards 开关状态

  var _React$useState = _react.default.useState([]),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      cardSettings = _React$useState2[0],
      setCardSettings = _React$useState2[1];

  var _React$useState3 = _react.default.useState(true),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      loading = _React$useState4[0],
      setLoading = _React$useState4[1];

  var _React$useState5 = _react.default.useState(''),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      dbPath = _React$useState6[0],
      setDbPath = _React$useState6[1];

  _react.default.useLayoutEffect(function () {
    var getDashboardSettings = function getDashboardSettings() {
      var path, list;
      return regeneratorRuntime.async(function getDashboardSettings$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return regeneratorRuntime.awrap(api.getSharedDataDir());

            case 3:
              path = _context.sent;
              _context.next = 6;
              return regeneratorRuntime.awrap(api.callRemote({
                type: 'org.umi.dashboard.card.list',
                payload: {
                  dbPath: path
                }
              }));

            case 6:
              list = _context.sent;
              setDbPath(path);
              setCardSettings(list || []);
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](0);
              console.error('getDashboardSettings error', _context.t0);

            case 14:
              _context.prev = 14;
              setLoading(false);
              return _context.finish(14);

            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[0, 11, 14, 17]]);
    };

    getDashboardSettings();
  }, []);

  var cards = (api.getDashboard() || []).map(function (card) {
    var key = card.key;
    var cardSetting = cardSettings.find(function (item) {
      return item.key === key;
    });
    var enable = cardSetting ? !!cardSetting.enable : true;
    return _objectSpread({}, card, {
      enable: enable
    });
  }); // 根据开启顺序，排列展示顺序

  var dashboardCards = (0, _immer.default)(cards, function (draft) {
    draft.sort(function (next, prev) {
      var nextIndex = cardSettings.findIndex(function (cardSetting) {
        return cardSetting.key === next.key;
      });
      var prevIndex = cardSettings.findIndex(function (cardSetting) {
        return cardSetting.key === prev.key;
      });
      return nextIndex - prevIndex;
    });
  });
  var contextValue = {
    api: api,
    dbPath: dbPath,
    cards: cards,
    dashboardCards: dashboardCards,
    loading: loading,
    setCardSettings: setCardSettings
  };
  return _react.default.createElement(_context2.default.Provider, {
    value: contextValue
  }, children);
};

var _default = Layout;
exports.default = _default;